import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.black900,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(9.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 28.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 18.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF6C6C6C),
    primaryContainer: Color(0XFF121718),
    secondary: Color(0XFF121718),
    secondaryContainer: Color(0XFF2E635B),
    tertiary: Color(0XFF121718),
    tertiaryContainer: Color(0XFF2E635B),

    // Background colors
    background: Color(0XFF121718),

    // Surface colors
    surface: Color(0XFF121718),
    surfaceTint: Color(0XFF121718),
    surfaceVariant: Color(0XFF2E635B),

    // Error colors
    error: Color(0XFF121718),
    errorContainer: Color(0XFF2E635B),
    onError: Color(0XFFFD764C),
    onErrorContainer: Color(0XFF121718),

    // On colors(text colors)
    onBackground: Color(0XFFFD764C),
    onInverseSurface: Color(0XFFFD764C),
    onPrimary: Color(0XFF121718),
    onPrimaryContainer: Color(0XFFFD764C),
    onSecondary: Color(0XFFFD764C),
    onSecondaryContainer: Color(0XFF121718),
    onTertiary: Color(0XFFFD764C),
    onTertiaryContainer: Color(0XFF121718),

    // Other colors
    outline: Color(0XFF121718),
    outlineVariant: Color(0XFF121718),
    scrim: Color(0XFF121718),
    shadow: Color(0XFF121718),

    // Inverse colors
    inversePrimary: Color(0XFF121718),
    inverseSurface: Color(0XFF121718),

    // Pending colors
    onSurface: Color(0XFFFD764C),
    onSurfaceVariant: Color(0XFF121718),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => Color(0XFF8A8A8A);
  Color get blueGray40001 => Color(0XFF8B8B8B);
  Color get blueGray40002 => Color(0XFF888888);
  Color get blueGray600 => Color(0XFF447B77);

  // Cyan
  Color get cyanA700 => Color(0XFF1AABCF);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFECBA8);
  Color get deepOrange900 => Color(0XFFA62900);
  Color get deepOrangeA700 => Color(0XFFF21300);

  // DeepPurple
  Color get deepPurple300 => Color(0XFF8875AD);

  // Gray
  Color get gray300 => Color(0XFFD9DEDF);
  Color get gray500 => Color(0XFF989E81);
  Color get gray50001 => Color(0XFFA69C92);
  Color get gray800 => Color(0XFF665539);
  Color get gray900 => Color(0XFF242424);

  // Green
  Color get green300 => Color(0XFF87AD6E);
  Color get green400 => Color(0XFF56D384);
  Color get green900 => Color(0XFF145418);
  Color get greenA400 => Color(0XFF0FD890);

  // LightGreen
  Color get lightGreen900 => Color(0XFF437C00);

  // Lime
  Color get lime800 => Color(0XFF8BB400);
  Color get lime900 => Color(0XFFA05624);

  // Orange
  Color get orange50 => Color(0XFFFFEBD0);

  // Pink
  Color get pink200 => Color(0XFFED90C9);
  Color get pinkA100 => Color(0XFFFC6BAB);

  // Red
  Color get red100 => Color(0XFFFDDFCA);
  Color get red300 => Color(0XFFB27759);
  Color get red900 => Color(0XFFA80000);
  Color get redA200 => Color(0XFFF74A53);
  Color get redA20001 => Color(0XFFFC5E68);
  Color get redA700 => Color(0XFFFC000A);

  // Teal
  Color get teal900 => Color(0XFF03373F);
  Color get tealA400 => Color(0XFF2AD78B);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow400 => Color(0XFFFDF04F);
  Color get yellow700 => Color(0XFFFEB935);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
